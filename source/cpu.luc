global Reg {
  const A  = 4d0;
  const B  = 4d1;
  const C  = 4d2;
  const D  = 4d3;
  const X  = 4d4;
  const Y  = 4d5;
  const BP = 4d6;
  const SP = 4d7;
  const IRQ_FLAGS = 4d8;
  const PC = 4d9;
  const MM = 4d10;
  const MP = 4d11;
}

global Flags {
  const EX = 3d7; // Exception
  const ID = 3d6; // IRQ Disable
  const IS = 3d5; // IRQ in service
  const SS = 3d4; // Single Step 
  const N = 3d3;  // negative
  const C = 3d2;  // carry 
  const V = 3d1;  // overflow 
  const Z = 3d0;  // zero 
}


module cpu (
    input clk,  // clock
    input rst,  // reset
    input irq_service,   // trap reqeusted from I/O (read irq)
    input nmi,           // nmi (non-maskable interrupt)
    input  irq[16],      // IRQ signals from bus
    output irq_ack[16],  // IRQ acknowledgements
    input ready,         // ready pin (if 1, CPU will run)
    output address[19],  // 19-bit memory address selector
    output port[8],      // 8-bit I/O port selector
    
    input d_in[8],       // 8-bit data from memory (in)
    output d_out[8],     // 8-bit data to memory (out)
    output d_read,       // request read from memory
    input  d_rdy,        // if 1, data is ready to be read 
    output d_write,      // request write to memory
    input io_in[8],      // I/O data in 
    output io_out[8],    // I/O data out 
    output io_read,
    output io_write,
    input io_rdy,        // if 1, I/O is ready to be read
    input io_timeout,    // if 1, I/O request timed out

    /* debugging */    
    
    input dbe,             // debugger enabled
    output dbg_reg[12][16],// DEBUG output of all registers
    output dbg_inst[32],   // DEBUG output of instruction
    output dbg_clocks[32], // DEBUG clocks
    input dbg_reg_sel[4],  // register select
    input dbg_reg_data[16],// data to write into selected register 
    input dbg_reg_write    // if set, write the data into the register
    
  ) {

  .clk(clk) {
    .rst(rst) {
      dff reg[12][16];     // 12 16-bit registers (alternatively 24 8-bit registers)
      
      dff inst[4][8];      // 32-bit instruction
      dff instOpExec[8];   // Final instruction to execute (after decodes & fixups)
      fsm state = { INIT, FETCH_1, FETCH_2, FETCH_3, FETCH_4, DECODE_1, DECODE_2, EXECUTE, NEXT, HALT, PUSH_LO, PUSH_HI, POP_HI, POP_LO };
      fsm pushall_regs = { PUSH_SP, PUSH_A, PUSH_B, PUSH_C, PUSH_D, PUSH_X, PUSH_Y, PUSH_BP };
      fsm popall_regs = { POP_BP, POP_Y, POP_X, POP_D, POP_C, POP_B, POP_A, POP_SP };
      
      addressing_unit calc_addr;      
      fsm addrState = { CALC, FETCH_WORD_HI, FETCH_WORD_LO, STORE_WORD_HI, STORE_WORD_LO };
      dff ld_st_addr[19];
      
      dff cpu_clocks[16];
      dff inst_clocks[16]; 
      dff cpu_clocks_hold[16];
      dff inst_clocks_hold[16];
      
      // these are used for "subroutines" where we can re-use states, but need to know the target & return state
      dff target_reg[4];
      dff target_reg_size;
      dff next_state[state.WIDTH];
      dff is_step_2;
      
    }  
  }
  alu alu;   
  instLUT instLUT; 
  memory_mapper mapper;
  
  decoder decode_flags(#WIDTH(3));
  
  sig instSize[2];
  sig instOp[8];
  sig fixup[1];
  
  sig destReg[3];
  sig destRegSize[1];
  sig srceReg[3];
  sig srceRegSize[1];
  
  sig addr_mm[2];
  sig addr_i;
  sig addr_x;
  sig addr_y;
  sig addr_orig[19];
  sig inc_ld_st_addr[19];
  sig store;
  
  sig br_u;
  sig br_w;
  sig br_n;
  sig br_flg[3];
  sig flg_value;
  sig take_br;
  
  sig flg_ex;
  sig flg_is;
  sig flg_id;
  sig flg_ss;
  sig flg_c;
  sig flg_n;
  sig flg_v;
  sig flg_z;
  
  sig reg_pc[16];
  sig reg_mp[16];
  sig inc_reg_mp[16];
  sig reg_sp[16];
  sig dec_reg_sp[16];
  sig inc_reg_sp[16];
  sig reg_bp[16];
  sig reg_x[16];
  sig reg_y[16];
  sig reg_d[16];
  
  sig skip[1];
  sig is_immediate;
  sig is_nybble;
  
  sig is_push;
  sig is_target_var;
  
  sig tmp_reg[16];
    
  always {
    /* defaults */
    address = mapper.mapped_address; // the exposed address should always be mapped w/ MM
    port = 8hxx;                     // output port can float
    d_out = 8hxx;                    // output data can float
    io_out = 8hxx;                   // output IO data can float
    d_write = 1b0;                   // no memory write request
    d_read = 1b0;                    // no memory read request
    io_write = 1b0;                  // no io write request
    io_read = 1b0;                   // no io read request
    mapper.address = 19hxxx;         // mapper's address can float when we're not asserting anything
    mapper.mm = reg.q[Reg.MM][14:0]; // mapper's memory map is linked to register MM
    irq_ack = 16bx;
    
    alu.size_r = 1bx;
    alu.size_a = 1bx;
    alu.size_b = 1bx;
    alu.op = 4bx;
    alu.carry_in = 1bx;
    alu.a = 16bx;
    alu.b = 16bx;
    
    dbg_reg = reg.q;
    dbg_inst = c{inst.q[0], inst.q[1], inst.q[2], inst.q[3]};
    dbg_clocks = c{cpu_clocks_hold.q, inst_clocks_hold.q};
    if (dbg_reg_write) {
      reg.d[dbg_reg_sel] = dbg_reg_data;
    }
    
    reg_pc = reg.q[Reg.PC];
    reg_mp = reg.q[Reg.MP];
    inc_reg_mp = reg_mp + 1;
    reg_bp = reg.q[Reg.BP];
    reg_sp = reg.q[Reg.SP];
    dec_reg_sp = reg_sp - 1;
    inc_reg_sp = reg_sp + 1;
    reg_d = reg.q[Reg.D];
    reg_x = reg.q[Reg.X];
    reg_y = reg.q[Reg.Y];
    
    inc_ld_st_addr = ld_st_addr.q + 1;
    
    calc_addr.i_en = 0;
    calc_addr.i_d_in = d_in;
    calc_addr.i_d_rdy = d_rdy;
    calc_addr.i_reg_bp = reg_bp;
    calc_addr.i_reg_pc = reg_pc;
    calc_addr.i_reg_x = reg_x;
    calc_addr.i_reg_y = reg_y;
    calc_addr.i_reg_d = reg_d;
    calc_addr.i_orig_addr = 19bx;
    calc_addr.i_mm = 2bx;
    calc_addr.i_i = 1bx;
    calc_addr.i_x = 1bx;
    calc_addr.i_y = 1bx;
    calc_addr.i_is_br_call = 1bx;
    
    decode_flags.in = 0;
    flg_ex = reg.q[Reg.IRQ_FLAGS][Flags.EX];
    flg_is = reg.q[Reg.IRQ_FLAGS][Flags.IS];
    flg_id = reg.q[Reg.IRQ_FLAGS][Flags.ID];
    flg_ss = reg.q[Reg.IRQ_FLAGS][Flags.SS];
    flg_n = reg.q[Reg.IRQ_FLAGS][Flags.N];
    flg_c = reg.q[Reg.IRQ_FLAGS][Flags.C];
    flg_v = reg.q[Reg.IRQ_FLAGS][Flags.V];
    flg_z = reg.q[Reg.IRQ_FLAGS][Flags.Z];
    
    tmp_reg = 16bx;
    
    instLUT.opcode = inst.q[0];      // wire up the first instruction byte to instLUT so we can calculate instruction size
    instSize = instLUT.out[9:8];     // size is the top two bytes of instLUT's return
    instOp = instLUT.out[7:0];       // actual opcode is the bottom eight bytes... or a FIXUP, in which case we have to 
                                     // fix up PC & the opcode. 
    inst_clocks.d = inst_clocks.q + 1;
    if (ready) {                     // ready means we are aren't waiting on any external resources (memory, etc.)
      cpu_clocks.d = cpu_clocks.q + 1;
      case (state.q) {
        state.INIT:
          reg.d[Reg.PC] = 16hFF00;   // Program Counter starts at 0xFF00 for bootstrap code (MMapped to 7FF00)
          reg.d[Reg.MP] = 16hFF00;   // Memory Pointer is same as PC
          reg.d[Reg.SP] = 16h2000;   // Stack Pointer is points at 0x2000
          reg.d[Reg.BP] = 16h2000;   // Base Poiner also points at 0x2000
          reg.d[Reg.MM] = 16b0111110001000001; // default memory mapping (page 3 = 31, page 2 = 2, page 1 = 1)
          reg.d[Reg.IRQ_FLAGS] = c{8h0,8b01000000}; // Interrupts are DISABLED until the bootstrap code in ROM enables them
          reg.d[Reg.IRQ_FLAGS][4] = dbe;         // if debugger is enabled, single step by default
          state.d = state.NEXT;     // start fetching instructions (but NEXT will let us halt immediately if need be)
  
        state.FETCH_1:
          mapper.address = c{3b000, reg_mp};        // assert mapped address on address output
          d_read = 1b1;                             // request READ from memory
          if(d_rdy) {                               // when data is available
            reg.d[Reg.MP] = inc_reg_mp;             // ... increment MP by one (ready for next byte, if needed)
            inst.d[0] = d_in;                       // ... set the instruction's first byte to the data
            inst.d[1] = 0;                          // ... clear the rest
            inst.d[2] = 0;
            inst.d[3] = 0;
            instLUT.opcode = d_in;                  // ... set the opcode to see if we need to read more
            state.d = instSize != InstWidth.ONE ? state.FETCH_2 : state.DECODE_1;
          }
          
        state.FETCH_2:
          mapper.address = c{3b000, reg_mp};        // assert mapped address on address output
          d_read = 1b1;                             // request READ from memory
          if(d_rdy) {                               // when data is availabe
            reg.d[Reg.MP] = inc_reg_mp;             // ... increment MP by one (ready for next byte, if needed)
            inst.d[1] = d_in;                       // ... populate second byte of instruction
            state.d = instSize != InstWidth.TWO ? state.FETCH_3 : state.DECODE_1;
          }
        state.FETCH_3:
          mapper.address = c{3b000, reg_mp};        // read another byte from mapped memory
          d_read = 1b1;                             // request READ from memory
          if(d_rdy) {                               // when data is available
            reg.d[Reg.MP] = inc_reg_mp;             // ... increment MP by one (ready for next byte, if needed)
            inst.d[2] = d_in;                       // ... populate third byte of instruction
            state.d = instSize != InstWidth.THREE ? state.FETCH_4 : state.DECODE_1;
          }
        state.FETCH_4:
          mapper.address = c{3b000, reg_mp};        // read another byte from mapped memory
          d_read = 1b1;                             // request READ from memory
          if(d_rdy) {
            reg.d[Reg.MP] = inc_reg_mp;             // ... increment MP by one (ready for next byte, if needed)
            inst.d[3] = d_in;                       // store final instruction byte
            state.d = state.DECODE_1;                 // no instruction is longer than four bytes; go to decoding
          }
        state.DECODE_1:
          reg.d[Reg.PC] = reg_mp;            // Move PC to match MP
          instOpExec.d = instOp;
          fixup = 1b0;                              // signal if we need a fixup -- 0 means no
          // fix ups -- need to account for having read too much of the instruction
          fixup = (instOp == Op.LD_FIXUP && inst.q[1] ==0 && inst.q[0][0]) ||
                  ((instOp == Op.LOOP_FIXUP || instOp == Op.BR_FIXUP) && inst.q[1][0]);
          if (fixup) {
            // move MP and PC back by one
            tmp_reg = reg_mp - 1;
            reg.d[Reg.MP] = tmp_reg;
            reg.d[Reg.PC] = tmp_reg;
          }

          case (instOp) {
            Op.NOT_NEG_EXC_FIXUP:                   // select the corret opcode based on second byte
              case (inst.q[1][5:4]) {
                2b00: instOpExec.d = Op.NOT_D;
                2b01: instOpExec.d = Op.NEG_D;
                2b10: instOpExec.d = Op.EXC_D;
                default: instOpExec.d = Op.INVALID;
              }
            Op.LD_FIXUP:
              if (inst.q[1] == 8h00) {
                instOpExec.d = inst.q[0][0] ? Op.LD_D_IMMB : Op.LD_D_IMMW;
              } else {
                instOpExec.d = Op.LD_D_ADDR;
              }
            Op.LOOP_FIXUP:
              instOpExec.d = inst.q[1][0] ? Op.LOOPS_ADR : Op.LOOP_ADDR;
            Op.BR_FIXUP:
              instOpExec.d = inst.q[1][0] ? Op.BRS_ADR : Op.BR_ADDR;
          }
          state.d = state.EXECUTE;
        state.EXECUTE:
          state.d = state.NEXT;

          if ((instOpExec.q >= Op.ADD_D_S && instOpExec.q <= Op.XOR_D_S) || (instOpExec.q >= Op.MUL_D_S && instOpExec.q <= Op.SMOD_D_S)
            || instOpExec.q == Op.SHL_D_S || instOpExec.q == Op.SHR_D_S
            || instOpExec.q == Op.SHL_D_IMMN || instOpExec.q == Op.SHR_D_IMMN
            || (instOpExec.q >= Op.ADD_D_IMMW && instOpExec.q <= Op.XOR_D_IMMB)) {
            is_immediate = (instOpExec.q >= Op.ADD_D_IMMW && instOpExec.q <= Op.XOR_D_IMMB);
            is_nybble = instOpExec.q == Op.SHL_D_IMMN || instOpExec.q == Op.SHR_D_IMMN;
            
            destReg = is_immediate ? c{1b0, inst.q[0][2:1]} : inst.q[1][7:5];
            destRegSize = is_immediate ? inst.q[0][0] : inst.q[1][4];

            srceReg = inst.q[1][3:1];
            srceRegSize = is_immediate ? destRegSize : inst.q[1][0]; // shouldn't matter for SHL/SHR
            
            alu.size_a = destRegSize;
            alu.a = destRegSize ? /* BYTE */ c{8b0, reg.q[destReg][7:0]} : reg.q[destReg];
            alu.size_b = srceRegSize;
            alu.b = srceRegSize ? /* BYTE */ c{8b0, reg.q[srceReg][7:0]} : reg.q[srceReg];
            if (is_immediate) alu.b = srceRegSize ? /* BYTE */ c{8b0, inst.q[1]} : c{inst.q[1], inst.q[2]};
            if (is_nybble) alu.b = c{12b0, inst.q[1][3:0]};
            alu.carry_in = flg_c; //reg.q[Reg.IRQ_FLAGS][2];
            skip = 0; // if skip isn't set, we'll store the result of aluOp back in dest
            alu.size_r = destRegSize;
            
            alu.op = AluOps.NOP;
            case (is_immediate ? instOpExec.q[5:3] : instOpExec.q[2:0]) {
              3b001: alu.op = AluOps.ADD;
              3b010: alu.op = AluOps.SUB;
              3b011: alu.op = AluOps.SUB; alu.carry_in = 0; skip = 1; // cmp is subtract, but don't store result
              3b100: alu.op = AluOps.AND;
              3b101: alu.op = AluOps.OR;
              3b110: alu.op = AluOps.AND; skip = 1; // test is AND, but don't store result
              3b111: alu.op = AluOps.XOR;
            }
            if (!is_immediate) {
              case(instOpExec.q) {
                Op.SHL_D_S: alu.op = AluOps.SHL;
                Op.SHR_D_S: alu.op = AluOps.SHR;
                Op.MUL_D_S: alu.op = AluOps.MUL;
                Op.MOD_D_S: alu.op = AluOps.MOD;
                Op.DIV_D_S: alu.op = AluOps.DIV;
                Op.SMUL_D_S: alu.op = AluOps.SMUL;
                Op.SMOD_D_S: alu.op = AluOps.SMOD;
                Op.SDIV_D_S: alu.op = AluOps.SDIV;
              }
            }
            if (is_nybble) {
              alu.op = AluOps.SHL;
              if (instOpExec.q == Op.SHR_D_IMMN) alu.op = AluOps.SHR;
            }
            
            
            if (!skip) {
              if (destRegSize) /* BYTE */ reg.d[destReg][7:0] = alu.result[7:0];
              else             /* WORD */ reg.d[destReg] = alu.result;
            }
            reg.d[Reg.IRQ_FLAGS][3:0] = c{alu.negative, alu.carry, alu.overflow, alu.zero};              
          }
          
          if (instOpExec.q == Op.TRAP_IMMB || instOpExec.q == Op.TRAP_S) { // TODO: implement TRAPs
            //state.d = state.NEXT;
          }
                    
          if (instOpExec.q == Op.NOT_D || instOpExec.q == Op.NEG_D) {
            destReg = inst.q[1][3:1];
            destRegSize = inst.q[1][0];
            alu.size_a = destRegSize;
            alu.a = destRegSize ? /* BYTE */ reg.q[destReg][7:0] : reg.q[destReg];
            alu.op = (inst.q[1][4]) ? AluOps.NEG : AluOps.NOT;
            if (destRegSize) /* BYTE */ reg.d[destReg][7:0] = alu.result[7:0];
            else             /* WORD */ reg.d[destReg] = alu.result;
            reg.d[Reg.IRQ_FLAGS][3:0] = c{alu.negative, alu.carry, alu.overflow, alu.zero};            
          }
          
          if (instOpExec.q == Op.EXC_D) {
            destReg = inst.q[1][3:1];
            destRegSize = inst.q[1][0];
            if (destRegSize) /* BYTE */ { reg.d[destReg][7:4] = reg.q[destReg][3:0]; reg.d[destReg][3:0] = reg.q[destReg][7:4]; }
            else             /* WORD */ { reg.d[destReg][15:8]= reg.q[destReg][7:0]; reg.d[destReg][7:0] = reg.q[destReg][15:8]; }
            // NOTE: does NOT set flags (unlike emulator; not sure we actually need to, and can't see a use case)
            // TODO: EMULATOR DIFF
          }
          
          if (instOpExec.q == Op.SWAP_D_S || instOpExec.q == Op.MOV_D_S) {
            destReg = inst.q[1][7:5];
            destRegSize = inst.q[1][4];
            srceReg = inst.q[1][3:1];
            srceRegSize = inst.q[1][0];
            if (destRegSize) /* BYTE */ reg.d[destReg][7:0] = reg.q[srceReg][7:0];
            else             /* WORD */ reg.d[destReg] = srceRegSize ? /* BYTE */ c{8b0, reg.q[srceReg][7:0]} : reg.q[srceReg];
            if (!instOpExec.q[0] /* SWAP */) {
              if (srceRegSize) /* BYTE */ reg.d[srceReg][7:0] = reg.q[destReg][7:0];
              else             /* WORD */ reg.d[srceReg] = destRegSize ? /* BYTE */ c{8b0, reg.q[destReg][7:0]} : reg.q[destReg];
            } 
          }
          
          if (instOpExec.q == Op.LD_D_IMMW) {
            destReg = inst.q[0][3:1];
            reg.d[destReg] = c{inst.q[2], inst.q[3]};
          }
          
          if (instOpExec.q == Op.LD_D_IMMB) {
            destReg = inst.q[0][3:1];
            reg.d[destReg][7:0] = inst.q[2];
          }
          
          if (instOpExec.q == Op.LD_D_ADDR || instOpExec.q == Op.ST_S_ADDR) {
            state.d = state.EXECUTE; // keep us in this state (we'll move forward after we ld or st)
            store = instOpExec.q == Op.ST_S_ADDR; //inst.q[0][5]; // if not set, loading

            destReg = inst.q[0][3:1];
            destRegSize = inst.q[0][0];
            
            addr_mm = inst.q[1][7:6];
            addr_i = inst.q[1][5];
            addr_x = inst.q[1][4];
            addr_y = inst.q[1][3];
            addr_orig = c{inst.q[1][2:0], inst.q[2], inst.q[3]};
            
            calc_addr.i_mm = addr_mm;
            calc_addr.i_i = addr_i;
            calc_addr.i_x = addr_x;
            calc_addr.i_y = addr_y;
            calc_addr.i_orig_addr = addr_orig;
            calc_addr.i_is_br_call = 0;
            
            case (addrState.q) {
              addrState.CALC:
                calc_addr.i_en = 1;
                mapper.address = calc_addr.o_addr;
                d_read = calc_addr.o_d_read;
                if (calc_addr.o_addr_valid) {
                  ld_st_addr.d = calc_addr.o_addr;
                  addrState.d = (store ? (destRegSize ? /*BYTE*/ addrState.STORE_WORD_LO : /*WORD*/ addrState.STORE_WORD_HI)
                                       : (destRegSize ? /*BYTE*/ addrState.FETCH_WORD_LO : /*WORD*/ addrState.FETCH_WORD_HI));                  
                }
              addrState.FETCH_WORD_HI:
                mapper.address = ld_st_addr.q;
                d_read = 1b1;                             // request READ from memory
                if(d_rdy) {                               // when data is available
                  ld_st_addr.d = inc_ld_st_addr;          // advance mem by one
                  reg.d[destReg][15:8] = d_in;            // load in destination HI
                  addrState.d = addrState.FETCH_WORD_LO;
                }
              addrState.FETCH_WORD_LO:
                mapper.address = ld_st_addr.q;
                d_read = 1b1;                             // request READ from memory
                if(d_rdy) {                               // when data is available
                  reg.d[destReg][7:0] = d_in;             // load in destination LO
                  addrState.d = addrState.CALC;
                  state.d = state.NEXT;                   // done; continue execution
                }
              addrState.STORE_WORD_HI:
                mapper.address = ld_st_addr.q;
                ld_st_addr.d = inc_ld_st_addr;          // advance mem by one
                d_out = reg.q[destReg][15:8];             // store HI portion to memory
                d_write = 1b1;                            // request WRITE to memory; we'll be paused until it's written
                addrState.d = addrState.STORE_WORD_LO;
              addrState.STORE_WORD_LO:
                mapper.address = ld_st_addr.q;
                d_out = reg.q[destReg][7:0];              // store LO portion to memory
                d_write = 1b1;                            // request WRITE to memory; we'll be paused until it's written
                addrState.d = addrState.CALC;
                state.d = state.NEXT;                     // done; continue execution
            }
          }
          
          if (instOpExec.q == Op.INC_D || instOpExec.q == Op.DEC_D || instOpExec.q == Op.LOOPS_ADR || instOpExec.q == Op.LOOP_ADDR) {
            destReg = inst.q[0][3:1];
            destRegSize = inst.q[0][0];
            alu.size_a = destRegSize;
            alu.a = destRegSize ? /* BYTE */ c{8h00, reg.q[destReg][7:0]} : /* WORD */ reg.q[destReg];
            alu.op = (instOpExec.q == Op.INC_D) ? AluOps.INC : AluOps.DEC;
            reg.d[Reg.IRQ_FLAGS][3:0] = c{alu.negative, alu.carry, alu.overflow, alu.zero};
            if (destRegSize) /* BYTE */ reg.d[destReg][7:0] = alu.result[7:0];
            else             /* WORD */ reg.d[destReg] = alu.result;
            
            if (instOpExec.q == Op.LOOPS_ADR || instOpExec.q == Op.LOOP_ADDR) {
              if (!alu.carry) {
                // TODO: Handle LOOP & LOOPS properly
                // THIS IS NOT COMPLETE; NO HANDLING OF ADDRESSING MODES ATM
                // jumps need to be sign extended when using eight bit short addresses
                
                reg.d[Reg.MP] = reg_mp + c{8x{inst.q[2][7]}, inst.q[2]};
              }
            }
          }
          
          if (instOpExec.q == Op.IN_D_IMMB) {
            destReg = inst.q[1][7:5];
            destRegSize = inst.q[1][4];
            io_read = ~io_rdy;
            port = inst.q[2]; 
            if (io_timeout) reg.d[Reg.IRQ_FLAGS][7] = 1; // set EXception when IO times out
            if (io_rdy) {
              if (destRegSize) /* BYTE */ reg.d[destReg][7:0] = io_in;
              else             /* WORD */ reg.d[destReg] = c{8h00, io_in};
            } else state.d = state.EXECUTE; // stick around for another cycle
          }
          
          if (instOpExec.q == Op.OUT_S_IMMB) {
            srceReg = inst.q[1][7:5];
            srceRegSize = inst.q[1][4];
            io_out = reg.q[srceReg][7:0];
            io_write = 1;
            port = inst.q[2];
          }
          
          if (instOpExec.q == Op.ENTER_IMMB) {
            target_reg.d = Reg.BP;
            target_reg_size.d = AluSize.WORD;
            next_state.d = state.EXECUTE;
            state.d = is_step_2.q ? state.NEXT : state.PUSH_LO;
            is_step_2.d = ~is_step_2.q;
            if (is_step_2.q) {
              reg.d[Reg.BP] = reg_sp;
              reg.d[Reg.SP] = reg_sp - c{8b0, inst.q[1]};
            }
          }
          
          if (instOpExec.q == Op.EXIT_IMMB) {
            reg.d[Reg.SP] = reg.q[Reg.SP] + c{8b0, inst.q[1]};
            target_reg.d = Reg.BP;
            target_reg_size.d = AluSize.WORD;
            next_state.d = state.NEXT;
            state.d = state.POP_HI;
          }
              
          if ((instOpExec.q == Op.BRK && dbe) || instOpExec.q == Op.HALT)
              state.d = state.HALT;
            
          if (instOpExec.q == Op.BRS_ADR || instOpExec.q == Op.BR_ADDR) {
            state.d = state.EXECUTE; // keep us in this state (we'll move forward after we ld or st)

            addr_mm = inst.q[1][7:6];
            addr_i = inst.q[1][5];
            addr_x = inst.q[1][4];
            addr_y = inst.q[1][3];
            addr_orig = inst.q[1][0] ? c{3b0, 8x{inst.q[2][7]}, inst.q[2]} : c{3b0, inst.q[2], inst.q[3]};
            
            br_n = inst.q[0][3];
            br_flg = inst.q[0][2:0];
            br_u = inst.q[1][2];
            br_w = inst.q[1][1];
            
            calc_addr.i_mm = addr_mm;
            calc_addr.i_i = addr_i;
            calc_addr.i_x = addr_x;
            calc_addr.i_y = addr_y;
            calc_addr.i_orig_addr = addr_orig;
            calc_addr.i_is_br_call = 1;
            
            calc_addr.i_en = 1;
            mapper.address = calc_addr.o_addr;
            d_read = calc_addr.o_d_read;
            if (calc_addr.o_addr_valid) {
              take_br = 0;
              if (br_u) {
                case (br_flg) {
                  3b010: /* LT; N!=V / C */
                    take_br = ( (!br_n && flg_n != flg_v) || 
                                 (br_n && flg_c) );
                  3b011: /* LTE; N!=V|Z / C|Z */ 
                    take_br = ( (!br_n && (flg_n != flg_v || flg_z)) || 
                                 (br_n && (flg_c || flg_z)) );
                  3b100: /* GT; N=V & !Z / !C & !Z */
                    take_br = ( (!br_n && (flg_n == flg_v && !flg_z)) || 
                                 (br_n && (!flg_c && !flg_z)) );
                  3b101: /* GTE; N=V | Z / !C | Z */
                    take_br = ( (!br_n && (flg_n == flg_v || flg_z)) || 
                                 (br_n && (!flg_c || flg_z)) );
                  /* TODO: remaining signed comparisons ABV, ABE, BLO, BLE*/
                  default: /* UNCONDITIONAL */
                    take_br = 1;
                }
              } else {
                decode_flags.in = br_flg;
                flg_value = |(reg.q[Reg.IRQ_FLAGS][7:0] & (decode_flags.out));
                take_br = (!br_n && flg_value) || (br_n && !flg_value);
              }
              if (take_br) reg.d[Reg.MP] = calc_addr.o_addr[15:0];
              if (br_w) {                              // CALL! Push PC
                next_state.d = state.NEXT;             // After we push PC, continue w/ execution
                target_reg.d = Reg.PC;                 // PC is what we want to push
                target_reg_size.d = AluSize.WORD;      // It's a word in length
                state.d = state.PUSH_LO;               // and actually push PC
              } else                                   // BR -- don't push anything, go on w/ execution
                state.d = state.NEXT; 
            }
          }
          
          if ((instOpExec.q >= Op.PUSHALL && instOpExec.q <= Op.RET) ||
              instOpExec.q == Op.PUSH_S  || instOpExec.q == Op.POP_D) {
            is_target_var = instOpExec.q == Op.PUSH_S  || instOpExec.q == Op.POP_D;
            is_push = is_target_var ? ~inst.q[0][4] : ~inst.q[0][0];
            //if (instOpExec.q == Op.RET) is_push = 0;
            state.d = is_push ? state.PUSH_LO : state.POP_HI;
            next_state.d = state.NEXT;

            if (is_target_var) {
              target_reg.d = c{1b0,inst.q[0][3:1]};
              target_reg_size.d = inst.q[0][0];
              next_state.d = state.NEXT;
            } else {
              target_reg_size.d = AluSize.WORD;
              case (inst.q[0][2:0]) {
                3b000: // pushall
                  next_state.d = pushall_regs.q == pushall_regs.PUSH_BP ? state.EXECUTE : state.NEXT;
                  pushall_regs.d = pushall_regs.q + 1;
                  case (pushall_regs.q) {
                    pushall_regs.PUSH_SP: target_reg.d = Reg.SP;
                    pushall_regs.PUSH_A: target_reg.d = Reg.A;
                    pushall_regs.PUSH_B: target_reg.d = Reg.B;
                    pushall_regs.PUSH_C: target_reg.d = Reg.C;
                    pushall_regs.PUSH_D: target_reg.d = Reg.D;
                    pushall_regs.PUSH_X: target_reg.d = Reg.X;
                    pushall_regs.PUSH_Y: target_reg.d = Reg.Y;
                    pushall_regs.PUSH_BP: target_reg.d = Reg.BP; pushall_regs.d = pushall_regs.PUSH_SP;
                  }
                3b001: // popall
                  next_state.d = popall_regs.q == popall_regs.POP_SP ? state.EXECUTE : state.NEXT;
                  popall_regs.d = popall_regs.q + 1;
                  case (popall_regs.q) {
                    popall_regs.POP_SP: target_reg.d = Reg.SP; popall_regs.d = popall_regs.POP_BP;
                    popall_regs.POP_A: target_reg.d = Reg.A;
                    popall_regs.POP_B: target_reg.d = Reg.B;
                    popall_regs.POP_C: target_reg.d = Reg.C;
                    popall_regs.POP_D: target_reg.d = Reg.D;
                    popall_regs.POP_X: target_reg.d = Reg.X;
                    popall_regs.POP_Y: target_reg.d = Reg.Y;
                    popall_regs.POP_BP: target_reg.d = Reg.BP; 
                  }
                3b010: /* pushf */ target_reg.d = Reg.IRQ_FLAGS; target_reg_size.d = AluSize.BYTE;
                3b011: /* popf  */ target_reg.d = Reg.IRQ_FLAGS; target_reg_size.d = AluSize.BYTE;
                3b100: /* pushmm*/ target_reg.d = Reg.MM;
                3b101: /* popmm */ target_reg.d = Reg.MM;
                3b111: /* ret */   target_reg.d = Reg.MP;
              }
            }
          }
          
          if (instOpExec.q == Op.FPU) {
          }
          
          if (instOpExec.q == Op.SET_F) {
            decode_flags.in = inst.q[0][2:0];
            reg.d[Reg.IRQ_FLAGS][7:0] = reg.q[Reg.IRQ_FLAGS] | decode_flags.out;           
          }
          
          if (instOpExec.q == Op.CLR_F) {
            decode_flags.in = inst.q[0][2:0];
            reg.d[Reg.IRQ_FLAGS][7:0] = reg.q[Reg.IRQ_FLAGS] & ~decode_flags.out;           
          }

          if (instOpExec.q == Op.WAIT_IMMB) {
          }
          
          
        state.NEXT: 
          // TODO: handle IRQs
          state.d = state.FETCH_1;                  // when done, go back to fetch the next instruction
          if (dbe & flg_ss) {                       // unless debugger is attached and single step enabled
            state.d = state.HALT;                   // ... in which case, halt
          }
          cpu_clocks_hold.d = cpu_clocks.q;
          inst_clocks_hold.d = inst_clocks.q;

          cpu_clocks.d = 0;
          inst_clocks.d = 0;
          
        state.HALT:
          if (irq_service & nmi) {                  // wait until trap asserted, IRQ has high bit, so NMI
            state.d = state.FETCH_1;                // ... continue execution
            cpu_clocks.d = 0;
            inst_clocks.d = 0;
          }
        state.PUSH_LO:                              // PUSH LO portion of target_reg on stack
          tmp_reg = dec_reg_sp;              // advance stack pointer a byte (negative direction; SP always goes DOWN when growing)
          reg.d[Reg.SP] = tmp_reg;                  // update SP 
          mapper.address = c{3b0, tmp_reg};
          d_out = reg.q[target_reg.q][7:0];         // store LO to memory
          d_write = 1b1;                            // request WRITE to memory; we'll be paused until it's written
          state.d = target_reg_size.q ? /*BYTE*/ next_state.q : /*WORD*/ state.PUSH_HI;
          
        state.PUSH_HI:                              // PUSH HI portion of target_reg on to stack
          tmp_reg = dec_reg_sp;              // advance stack pointer a byte (negative direction; SP always goes DOWN when growing)
          reg.d[Reg.SP] = tmp_reg;                  // update SP 
          mapper.address = c{3b0, tmp_reg};
          d_out = reg.q[target_reg.q][15:8];        // store HI to memory
          d_write = 1b1;                            // request WRITE to memory; we'll be paused until it's written
          state.d = next_state.q;
          
        state.POP_HI:
          if (!target_reg_size.q) { /* WORD */
            mapper.address = c{3b0,reg.q[Reg.SP]};         // read from SP (it's pointing at the right place)
            d_read = 1;
            if (d_rdy) {
              reg.d[target_reg.q][15:8] = d_in;     // copy HI bits
              reg.d[Reg.SP] = inc_reg_sp;    // advance SP by one for next read
              state.d = state.POP_LO;               // go get next byte
            }
          } else {
            state.d = state.POP_LO;
          }
        
        state.POP_LO:
          mapper.address = c{3b0,reg.q[Reg.SP]};           // read from SP (it's pointing at the right place)
          d_read = 1;
          if (d_rdy) {
            reg.d[target_reg.q][7:0] = d_in;       // copy LO bits
            reg.d[Reg.SP] = inc_reg_sp;      // advance SP by one for next read
            state.d = next_state.q;                 // return
          }

      }
    }
  }
}

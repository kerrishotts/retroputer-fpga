global Task {
  const NOP =            5h00;
  const ALU_ARITHMETIC = 5h01;
  const TRAP =           5h02;
  const NOT_NEG =        5h03;
  const EXC =            5h04;
  const SWAP_MOV =       5h05;
  const LD_1 =           5h06;
  const LD_2 =           5h07;
  const LD_ST =          5h08;
  const INC_DEC_LOOP =   5h09;
  const IN =             5h0A;
  const OUT =            5h0B;
  const ENTER =          5h0C;
  const EXIT =           5h0D;
  const BRK_HALT =       5h0E;
  const BR =             5h0F;
  const PUSH_POP_RET =   5h10;
  const FPU =            5h11;
  const SET =            5h12;
  const CLR =            5h13;
  const WAIT =           5h14;  
}

module taskLUT (
    input addr[8],
    output out[5]
  ) {

  always {
    case (addr) {
      Op.NOP        : out = Task.NOP;
      Op.ADD_D_S    : out = Task.ALU_ARITHMETIC;
      Op.SUB_D_S    : out = Task.ALU_ARITHMETIC;
      Op.CMP_D_S    : out = Task.ALU_ARITHMETIC;
      Op.AND_D_S    : out = Task.ALU_ARITHMETIC;
      Op.OR_D_S     : out = Task.ALU_ARITHMETIC;
      Op.TEST_D_S   : out = Task.ALU_ARITHMETIC;
      Op.XOR_D_S    : out = Task.ALU_ARITHMETIC;
      Op.TRAP_IMMB  : out = Task.TRAP;
      Op.NOT_NEG_EXC_FIXUP : out = Task.NOP;
      Op.NOT_D      : out = Task.NOT_NEG;
      Op.NEG_D      : out = Task.NOT_NEG;
      Op.EXC_D      : out = Task.EXC;
      Op.SHL_D_IMMN : out = Task.ALU_ARITHMETIC;
      Op.SHL_D_S    : out = Task.ALU_ARITHMETIC;
      Op.SHR_D_IMMN : out = Task.ALU_ARITHMETIC;
      Op.SHR_D_S    : out = Task.ALU_ARITHMETIC;
      Op.SWAP_D_S   : out = Task.SWAP_MOV;
      Op.MOV_D_S    : out = Task.SWAP_MOV;
      Op.LD_FIXUP   : out = Task.NOP;
      Op.LD_D_IMMW  : out = Task.LD_1;
      Op.LD_D_IMMB  : out = Task.LD_2;
      Op.LD_D_ADDR  : out = Task.LD_ST;
      Op.ST_S_ADDR  : out = Task.LD_ST;
      Op.IN_D_IMMB  : out = Task.IN;
      Op.OUT_S_IMMB : out = Task.OUT;
      Op.ENTER_IMMB : out = Task.ENTER;
      Op.EXIT_IMMB  : out = Task.EXIT;
      Op.HALT       : out = Task.BRK_HALT;
      Op.BRK        : out = Task.BRK_HALT;
      Op.TRAP_S     : out = Task.TRAP;
      Op.ADD_D_IMMW : out = Task.ALU_ARITHMETIC;
      Op.ADD_D_IMMB : out = Task.ALU_ARITHMETIC;
      Op.SUB_D_IMMW : out = Task.ALU_ARITHMETIC;
      Op.SUB_D_IMMB : out = Task.ALU_ARITHMETIC;
      Op.CMP_D_IMMW : out = Task.ALU_ARITHMETIC;
      Op.CMP_D_IMMB : out = Task.ALU_ARITHMETIC;
      Op.AND_D_IMMW : out = Task.ALU_ARITHMETIC;
      Op.AND_D_IMMB : out = Task.ALU_ARITHMETIC;
      Op.OR_D_IMMW  : out = Task.ALU_ARITHMETIC;
      Op.OR_D_IMMB  : out = Task.ALU_ARITHMETIC;
      Op.TEST_D_IMMW: out = Task.ALU_ARITHMETIC;
      Op.TEST_D_IMMB: out = Task.ALU_ARITHMETIC;
      Op.XOR_D_IMMW : out = Task.ALU_ARITHMETIC;
      Op.XOR_D_IMMB : out = Task.ALU_ARITHMETIC;
      Op.LOOP_FIXUP : out = Task.NOP;
      Op.LOOP_ADDR  : out = Task.INC_DEC_LOOP;
      Op.LOOPS_ADR  : out = Task.INC_DEC_LOOP;
      Op.BR_FIXUP   : out = Task.NOP;
      Op.BR_ADDR    : out = Task.BR;
      Op.BRS_ADR    : out = Task.BR;
      Op.PUSHALL    : out = Task.PUSH_POP_RET;
      Op.POPALL     : out = Task.PUSH_POP_RET;
      Op.PUSHF      : out = Task.PUSH_POP_RET;
      Op.POPF       : out = Task.PUSH_POP_RET;
      Op.PUSHMM     : out = Task.PUSH_POP_RET;
      Op.POPMM      : out = Task.PUSH_POP_RET;
      Op.RET        : out = Task.PUSH_POP_RET;
      Op.MUL_D_S    : out = Task.ALU_ARITHMETIC;
      Op.DIV_D_S    : out = Task.ALU_ARITHMETIC;
      Op.MOD_D_S    : out = Task.ALU_ARITHMETIC;
      Op.SMUL_D_S   : out = Task.ALU_ARITHMETIC;
      Op.SDIV_D_S   : out = Task.ALU_ARITHMETIC;
      Op.SMOD_D_S   : out = Task.ALU_ARITHMETIC;
      Op.FPU        : out = Task.FPU;
      Op.WAIT_IMMB  : out = Task.WAIT;
      Op.SET_F      : out = Task.SET;
      Op.CLR_F      : out = Task.CLR;
      Op.INC_D      : out = Task.INC_DEC_LOOP;
      Op.DEC_D      : out = Task.INC_DEC_LOOP;
      Op.PUSH_S     : out = Task.PUSH_POP_RET;
      Op.POP_D      : out = Task.PUSH_POP_RET;
      Op.INVALID    : out = Task.NOP;
      default       : out = Task.NOP;
    }
  }
}

global Devices {
  const TIMERS       = 4h0;
  const SCREEN       = 4h1;
  const SCREEN_2     = 4h2;
  const KEYBOARD     = 4h3;
  const CONTROLLERS  = 4h4;
  const MOUSE        = 4h5;
  const AUDIO        = 4h6;
  const STORAGE      = 4h7;
  const CONSOLE      = 4h8;
  const COM2         = 4h9;
  const COM3         = 4hA;
  const COM4         = 4hB;
  const CONTROLLER_2 = 4hC;
  const DMA          = 4hD;
  const DEBUGGER     = 4hE;
  const POWER        = 4hF;
}

module bus (
    input clk,  // clock
    input rst,  // reset
    
    input io_addr[8],     // I/O address to read or write from 
    input io_in[8],       // data to write to the bus
    
    output rdy,           // ready to accept a read or write
    input io_write,       // send data_in to a device
    
    input io_read,        // read from I/O address and put on out
    output rd_valid,      // data is ready to be read from device
    output io_out[8],     // data read from device
    
    output irq_request,   // signal cpu when bus needs its attention
    output irq[16],       // irq 
    input  irq_ack[16]    // when set, CPU saw the IRQ 
       
  ) {
  
  .clk(clk), .rst(rst) {
    fsm state = { READY, READ, WRITE, WAIT };
    dff device_irq_signals[16];
    dff addr[8];
    dff data_in[8];
    dff data_out[8];
    dff data_valid[1];
    
    /* devices */
    device_timers timers; // device 0
  }
  
  sig device_sel[4];
  sig port_sel[4];
  
  always {
      
    rdy = state.q == state.READY;
    rd_valid = data_valid.q;
    io_out = data_out.q;
    
    //io_out = data_out.q;
    
    // If any IRQ signal has been requested, signal CPU
    irq_request = |device_irq_signals.q;     // there's an IRQ pending
    irq = device_irq_signals.q;              // and here's all the devices waiting to be serviced 
    
    device_sel = addr.q[7:4];
    port_sel = addr.q[3:0];
    
    // wire up devices
    timers.port_sel = port_sel;
    timers.io_in = data_in.q;
    timers.io_read = 0;
    timers.io_write = 0;
    
    // when CPU acknowledges an IRQ, we clear that signal 
    if (|irq_ack) {
      device_irq_signals.d[irq_ack] = 0;
    }
    
    case (state.q) {
      default:
//      state.READY: 
        state.d = (io_write ? state.WRITE : (io_read ? state.READ: state.READY));
        data_in.d = io_in;
        //data_valid.d = 0;
        //data_out.d = 0;
        addr.d = io_addr;

      state.READ: 
        case (device_sel) {
          Devices.TIMERS: 
            timers.io_read = 1;
            data_out.d = timers.io_out;
            data_valid.d = timers.rd_valid;
            state.d = state.WAIT;
          default:
            data_out.d = io_addr;
            data_valid.d = 1;
            state.d = state.WAIT;
        }
      
      state.WRITE:
        case (device_sel) {
          Devices.TIMERS:
            timers.io_write = 1;
            state.d = state.WAIT;
          default:
            state.d = state.WAIT;
        }
      state.WAIT:
        data_valid.d = 0;
        data_out.d = 0;
        state.d = state.READY;
    }
  }
}
